(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{122:function(e,t,o){"use strict";o.r(t),o.d(t,"frontMatter",(function(){return a})),o.d(t,"metadata",(function(){return i})),o.d(t,"toc",(function(){return u})),o.d(t,"default",(function(){return p}));var n=o(3),r=o(7),l=(o(0),o(128)),a={id:"rbe-pools",title:"RBE Executor Pools",sidebar_label:"RBE Executor Pools"},i={unversionedId:"rbe-pools",id:"rbe-pools",isDocsHomePage:!1,title:"RBE Executor Pools",description:"By default, all BuildBuddy executors are placed in a single pool - and any task can run on any executor (running the same operating system and cpu architecture).",source:"@site/../docs/rbe-pools.md",slug:"/rbe-pools",permalink:"/docs/rbe-pools",editUrl:"https://github.com/buildbuddy-io/buildbuddy/edit/master/docs/../docs/rbe-pools.md",version:"current",sidebar_label:"RBE Executor Pools",sidebar:"someSidebar",previous:{title:"RBE with GitHub Actions",permalink:"/docs/rbe-github-actions"},next:{title:"Troubleshooting",permalink:"/docs/troubleshooting"}},u=[{value:"Deploying executors in a pool",id:"deploying-executors-in-a-pool",children:[]},{value:"Setting the app&#39;s default pool name",id:"setting-the-apps-default-pool-name",children:[]},{value:"Selecting a pool to run your builds on",id:"selecting-a-pool-to-run-your-builds-on",children:[{value:"Platform level",id:"platform-level",children:[]},{value:"Target level",id:"target-level",children:[]}]}],c={toc:u};function p(e){var t=e.components,o=Object(r.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},c,o,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,"By default, all BuildBuddy executors are placed in a single pool - and any task can run on any executor (running the same operating system and cpu architecture)."),Object(l.b)("p",null,Object(l.b)("a",{parentName:"p",href:"/docs/rbe-platforms"},"Platforms")," can be used to specify custom Docker images in which to run your actions, but sometimes you want control over more properties of the executor machine - like available memory, access to GPUs, or physical location."),Object(l.b)("p",null,"To support these use cases, BuildBuddy allows executors to be registered in different pools - and for Bazel to select from these pools at either the Platform level or the target level, depending on your needs."),Object(l.b)("h2",{id:"deploying-executors-in-a-pool"},"Deploying executors in a pool"),Object(l.b)("p",null,"When creating an executor deployment, you can specify the name of the pool its executors should be registered to with the ",Object(l.b)("inlineCode",{parentName:"p"},"MY_POOL")," environment variable. This can be set to any string value."),Object(l.b)("p",null,"If using the ",Object(l.b)("inlineCode",{parentName:"p"},"buildbuddy/buildbuddy-executor")," ",Object(l.b)("a",{parentName:"p",href:"https://github.com/buildbuddy-io/buildbuddy-helm/tree/master/charts/buildbuddy-executor"},"Helm charts"),", you can set this using the ",Object(l.b)("a",{parentName:"p",href:"https://github.com/buildbuddy-io/buildbuddy-helm/blob/master/charts/buildbuddy-executor/values.yaml#L15"},"poolName value"),"."),Object(l.b)("h2",{id:"setting-the-apps-default-pool-name"},"Setting the app's default pool name"),Object(l.b)("p",null,"By default, both executors and the BuildBuddy app do not set a pool name and any RBE request that comes in without a ",Object(l.b)("inlineCode",{parentName:"p"},"Pool")," property set will be sent to the default pool. If you'd like requests without a ",Object(l.b)("inlineCode",{parentName:"p"},"Pool")," property to be sent to a different default pool, you can set the app's ",Object(l.b)("inlineCode",{parentName:"p"},"default_pool_name")," in the ",Object(l.b)("inlineCode",{parentName:"p"},"remote_execution")," block of its ",Object(l.b)("inlineCode",{parentName:"p"},"config.yaml"),"."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"remote_execution:\n    enable_remote_exec: true\n    default_pool_name: my-default-pool\n")),Object(l.b)("h2",{id:"selecting-a-pool-to-run-your-builds-on"},"Selecting a pool to run your builds on"),Object(l.b)("p",null,"Now that you've deployed multiple executor pools, you can select which pool you'd like your builds to run on - either at the platform level or the target level."),Object(l.b)("h3",{id:"platform-level"},"Platform level"),Object(l.b)("p",null,"You can configure BuildBuddy RBE to use a custom executor pool at the platform level, by adding the following rule to a BUILD file:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'platform(\n    name = "gpu_platform",\n    exec_properties = {\n        "OSFamily": "Linux",\n        "Pool": "my-gpu-pool",\n    },\n)\n')),Object(l.b)("p",null,"Make sure to replace ",Object(l.b)("inlineCode",{parentName:"p"},"my-gpu-pool")," with your docker image url."),Object(l.b)("p",null,"You can then pass this configuration to BuildBuddy RBE with the following flag:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"--host_platform=//:gpu_platform\n")),Object(l.b)("p",null,"This assumes you've placed this rule in your root BUILD file. If you place it elsewhere, make sure to update the path accordingly."),Object(l.b)("h3",{id:"target-level"},"Target level"),Object(l.b)("p",null,"If you want different targets to run in different RBE environments, you can specify ",Object(l.b)("inlineCode",{parentName:"p"},"exec_properties")," at the target level. For example if you want to run one set of tests in a high-memory pool, or another set of targets on executors with GPUs."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},'go_test(\n    name = "memory_hogging_test",\n    srcs = ["memory_hogging_test.go"],\n    embed = [":go_default_library"],\n    exec_properties = {\n        "Pool": "high-memory-pool",\n    },\n)\n')))}p.isMDXComponent=!0},128:function(e,t,o){"use strict";o.d(t,"a",(function(){return s})),o.d(t,"b",(function(){return m}));var n=o(0),r=o.n(n);function l(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){l(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function u(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)o=l[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)o=l[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},s=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var o=e.components,n=e.mdxType,l=e.originalType,a=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),s=p(o),b=n,m=s["".concat(a,".").concat(b)]||s[b]||d[b]||l;return o?r.a.createElement(m,i(i({ref:t},c),{},{components:o})):r.a.createElement(m,i({ref:t},c))}));function m(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=o.length,a=new Array(l);a[0]=b;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:n,a[1]=i;for(var c=2;c<l;c++)a[c]=o[c];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,o)}b.displayName="MDXCreateElement"}}]);